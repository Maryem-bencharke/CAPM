# -*- coding: utf-8 -*-
"""CAPM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1twAqpSS2sv_HaBlxW_AMOqRkxUN6ZHa8
"""

import pandas as pd
import numpy as np

!pip install yfinance

import yfinance as yf
import statsmodels.api as sm
import matplotlib.pyplot as plt

RISKY_ASSET='GOOGL'
MARKET_BENCHMARK= '^DJI'
START_DATE='2017-12-01'
END_DATE='2022-10-31'

df=yf.download(
    [RISKY_ASSET, MARKET_BENCHMARK],
    start = START_DATE,
    end= END_DATE,
    progress=False)

df

X=df['Adj Close'].rename(columns={RISKY_ASSET:'asset_return',
                            MARKET_BENCHMARK:'market_return'})\
                            .resample('MS')\
                            .last()\
                            .pct_change()\
                            .dropna()
X



import pandas_datareader.data as web

Risk_free_rate = web.DataReader('TB3MS', 'fred', start='2018-01-01',end=END_DATE,)

rf = (1+(Risk_free_rate/100))**(1/12)-1

rf.plot(title="Risk free rate (3 months treasury bill)"
, figsize=(12,7),grid = True,color="brown")

df_premium=X.assign(TB3MS=rf['TB3MS'],assert_premium=X['asset_return']-rf['TB3MS'],market_premium=X['market_return']-rf['TB3MS'])
df_premium

x=df_premium['market_premium']
y=df_premium['assert_premium']
fig, ax = plt.subplots(figsize=(12,7))
ax.scatter(x,y,alpha=0.5,color='orchid')
fig.suptitle("\n"'Nuage de points')
fig.tight_layout(pad=2)
ax.grid(True)

max_x = df_premium['market_premium'].max()
min_x = df_premium['market_premium'].min()
x=sm.add_constant(x)
model=sm.OLS(y,x)
fitted=model.fit()

n_obs=len(x)
print(n_obs)
x_pred=np.linspace(min_x,max_x,n_obs)
x_pred2=sm.add_constant(x_pred)

y_pred=fitted.predict(x_pred2)
print(y_pred)

x=df_premium['market_premium']
y=df_premium['assert_premium']
fig, ax= plt.subplots(figsize=(12,7))
fig.suptitle("\n"'OLS line regression ')
fig.tight_layout(pad=2)
ax.grid(True)
ax.plot(x_pred,y_pred,'-',color='blue')
ax.scatter(x,y,alpha=0.5,color='orchid')

import numpy as np
array = np.cov(X['asset_return'],X['market_return'])
beta =array[0][1]/array[1][1]
print(beta)

import statsmodels.api as sm
model = sm.OLS(X['asset_return'], X['market_return'])
results = model.fit()
print(results.summary())

from scipy import stats
slope, intercept, r_value, p_value, std_err = stats.linregress(X['market_return'],X['asset_return'])

print(slope)

from scipy import stats
t=stats.t.ppf(1-0.025,df=58)

x=df_premium['market_premium']
x=sm.add_constant(x)
y_hat=fitted.predict(x)


x=df_premium['market_premium']
y_err=y-y_hat
mean_x=x.T[1].mean()
dof=n_obs -fitted.df_model -1

from scipy import stats
t=stats.t.ppf(1-0.025,df=dof)
s_err=np.sum(np.power(y_err,2))
conf=t * np.sqrt((s_err/(n_obs-2))*(1/n_obs + (np.power((x_pred-mean_x),2)/((np.sum(np.power(x_pred,2))) - n_obs*(np.power(mean_x,2))))))
conf_pred=t*np.sqrt((s_err/(n_obs-2)))
upper = y_pred + abs(conf)
lower = y_pred - abs(conf)

upper_pred = y_pred + abs(conf_pred)
lower_pred = y_pred - abs(conf_pred)
fig, ax= plt.subplots(figsize=(12,7))
fig.suptitle("\n"'confidence interval for the regression ')
fig.tight_layout(pad=2)
ax.grid(True)
ax.plot(x_pred,y_pred,'-',color='blue')
ax.scatter(x,y,alpha=0.5,color='orchid')

ax.plot(x_pred,lower,'-.',color='r',linewidth=0.5)
ax.plot(x_pred,upper,'-.',color='r',linewidth=0.5)
ax.fill_between(x_pred,lower,upper,color='#888888',alpha=0.4)

x=df_premium['market_premium']
x=sm.add_constant(x)
y_hat=fitted.predict(x)


x=df_premium['market_premium']
y_err=y-y_hat
mean_x=x.T[1].mean()
dof=n_obs -fitted.df_model -1

from scipy import stats
t=stats.t.ppf(1-0.025,df=dof)
s_err=np.sum(np.power(y_err,2))
conf=t * np.sqrt((s_err/(n_obs-2)))
#conf=t * np.sqrt(s_err/(n_obs-2))*(((n_obs*(np.power(mean_x,2)))))
conf_pred=t*np.sqrt((s_err/(n_obs-2)))
upper = y_pred + abs(conf)
lower = y_pred - abs(conf)

upper_pred = y_pred + abs(conf_pred)
lower_pred = y_pred - abs(conf_pred)
fig, ax= plt.subplots(figsize=(12,7))
fig.suptitle("\n"'confidence interval for the regression ')
fig.tight_layout(pad=2)
ax.grid(True)
ax.plot(x_pred,y_pred,'-',color='blue')
ax.scatter(x,y,alpha=0.5,color='orchid')

ax.plot(x_pred,lower,'-.',color='r',linewidth=0.5)
ax.plot(x_pred,upper,'-.',color='r',linewidth=0.5)
ax.fill_between(x_pred,lower,upper,color='#888888',alpha=0.4)